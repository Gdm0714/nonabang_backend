name: Java CI with Gradle and Docker

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build-and-push-docker-image:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Create application properties file from secrets
      run: |
        cat <<EOF >> src/main/resources/application.properties
        jwt.expirationHours=${{ secrets.JWT_EXPIRATION_HOURS }}
        jwt.issuer=${{ secrets.JWT_ISSUER }}
        jwt.access.expiration=${{ secrets.JWT_ACCESS_EXPIRATION }}
        jwt.access.header=${{ secrets.JWT_ACCESS_HEADER }}
        jwt.refresh.expiration=${{ secrets.JWT_REFRESH_EXPIRATION }}
        jwt.refresh.header=${{ secrets.JWT_REFRESH_HEADER }}
        jwt.secret=${{ secrets.JWT_SECRET }}
        jwt.token-validity-in-seconds=${{ secrets.JWT_TOKEN_VALIDITY_IN_SECONDS }}
        spring.security.oauth2.client.registration.google.client-id=${{ secrets.GOOGLE_CLIENT_ID }}
        spring.security.oauth2.client.registration.google.client-secret=${{ secrets.GOOGLE_CLIENT_SECRET }}
        spring.security.oauth2.client.registration.google.scope=${{ secrets.GOOGLE_SCOPE }}
        spring.security.oauth2.client.registration.google.redirect-uri=${{ secrets.GOOGLE_REDIRECT_URI }}
        spring.security.oauth2.client.registration.google.client-name=${{ secrets.GOOGLE_CLIENT_NAME }}
        spring.security.oauth2.client.registration.google.authorization-grant-type=${{ secrets.GOOGLE_AUTHORIZATION_GRANT_TYPE }}
        spring.security.oauth2.client.registration.naver.client-id=${{ secrets.NAVER_CLIENT_ID }}
        spring.security.oauth2.client.registration.naver.client-secret=${{ secrets.NAVER_CLIENT_SECRET }}
        spring.security.oauth2.client.registration.naver.scope=${{ secrets.NAVER_SCOPE }}
        spring.security.oauth2.client.registration.naver.redirect-uri=${{ secrets.NAVER_REDIRECT_URI }}
        spring.security.oauth2.client.registration.naver.client-name=${{ secrets.NAVER_CLIENT_NAME }}
        spring.security.oauth2.client.registration.naver.authorization-grant-type=${{ secrets.NAVER_AUTHORIZATION_GRANT_TYPE }}
        spring.security.oauth2.client.provider.naver.authorization-uri=${{ secrets.NAVER_AUTHORIZATION_URI }}
        spring.security.oauth2.client.provider.naver.token-uri=${{ secrets.NAVER_TOKEN_URI }}
        spring.security.oauth2.client.provider.naver.user-info-uri=${{ secrets.NAVER_USER_INFO_URI }}
        spring.security.oauth2.client.provider.naver.user-name-attribute=${{ secrets.NAVER_USER_NAME_ATTRIBUTE }}
        EOF

    - name: Set Gradle wrapper permissions
      run: chmod +x ./gradlew

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Build with Gradle
      run: ./gradlew clean bootJar

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: Build Docker image
      run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/nonabang .

    - name: Push Docker image to Docker Hub
      run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/nonabang

  deploy-to-ec2:
    needs: build-and-push-docker-image
    runs-on: self-hosted

    steps:
    - name: Pull Docker image
      run: sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/nonabang

    - name: Stop running container
      run: sudo docker stop nonabang-app || true

    - name: Remove old container
      run: sudo docker rm nonabang-app || true

    - name: Run new container
      run: sudo docker run --name nonabang-app --rm -d -p 8080:8080 ${{ secrets.DOCKERHUB_USERNAME }}/nonabang

    - name: Delete old Docker images
      run: sudo docker image prune -a -f --filter "until=24h"
